{
    "kernel":{
        "layers":[
            "k0_tape",
            "k1_thread",
            "k2_stack",
            "k3_callstack",
            "k4_library",
            "k4_interpreter"],
        "k0_tape":{
            "struct" : {
                "opcode":"opcode",
                "dst":"register",
                "src":"register",
                "cnst":"value"
            },
            "opcode" : [
                "@nop",
                "@read # dst = [ src + offset ]",
                "@write # [ src + offset ] = dst",
                "@add # dst = ( src + offset )",
                "@adde # dst += offset", 
                "@debug"
            ],
        },
        "k1_thread":{
            "struct" : {
                "r_thread_ptr":"& thread"
            },
            "thread" : [
                "rt_register_ptr",
                "rt_instruction_ptr",
                "rt_stack_ptr",
                "rt_heap_ptr"
            ],
            "opcodes":[
                "@read_thread_ptr # dst = r_thread_ptr",
                "@jump ins_ptr = dst",
                "@jump_if  (src == #) ins_ptr = dst",
                "@jump_op ins_ptr = @dst",
            ],
        },
        "k2_stack":{
            "struct" : [
                "r_zero",
                "r_thread",
                "r_ins_ptr",
                "r_stack_ptr",
                "r_reg_ptr",
                "r_op_code",
                "r_temp_0",
                "r_temp_regid"
            ],
            "instructions" : [
                "nop",
                "exit",
                "stack_init",
                "stack_main",
                "stack_return",
                "push_i value",
                "push src",
                "peek dst",
                "pop dst",
                "call_push src",
                "call_pop"
            ],
            "source" : [
                "@ stack_init",
                "read_thread_ptr r_thread",
                "read r_ins_ptr, r_thread, rt_instruction_ptr",
                "read r_stack_ptr, r_thread, rt_stack_ptr",
                "read r_reg_ptr, r_thread, rt_register_ptr",
                "jump stack_main",
        
                "@ stack_main",
                "read r_op_code, r_ins_ptr, 0",
                "debug r_ins_ptr",
                "add r_ins_ptr, r_ins_ptr, 1",
                "jump_op r_op_code",
        
                "@ stack_return",
                "write r_ins_ptr, r_thread, rt_instruction_ptr",
                "write r_stack_ptr, r_thread, rt_stack_ptr",
                "kernel_flush",
                "jump @stack_main",
        
                "@ push_i value",
                "read r_temp_0, r_ins_ptr, 0",
                "add r_ins_ptr, r_ins_ptr, 1",
                "write r_temp_0, r_stack_ptr, 0 # write",
                "debug r_stack_ptr",
                "add r_stack_ptr, r_stack_ptr, 1",
                "jump @stack_return",
        
                "@ pop register",
                "read r_temp_regid, r_ins_ptr, 0",
                "adde r_temp_regid, r_reg_ptr, 0",
                "add r_ins_ptr, r_ins_ptr, 1",
                "read r_temp_0, r_stack_ptr, -1 # read",
                "write r_temp_0, r_temp_regid # write",
                "debug r_temp_regid",
                "add r_stack_ptr, r_stack_ptr, -1",
                "jump @stack_return",
        
                "@ push register",
                "read r_temp_regid, r_ins_ptr, 0",
                "adde r_temp_regid, r_reg_ptr, 0",
                "add r_ins_ptr, r_ins_ptr, 1",
                "read r_temp_0, r_temp_regid # read",
                "debug r_temp_regid",
                "write r_temp_0, r_stack_ptr, 0 # write",
                "add r_stack_ptr, r_stack_ptr, 1",
                "jump @stack_return",
        
                "@ peek register",
                "read r_temp_regid, r_ins_ptr, 0",
                "adde r_temp_regid, r_reg_ptr, 0",
                "add r_ins_ptr, r_ins_ptr, 1",
                "read r_temp_0, r_stack_ptr, -1 # read",
                "write r_temp_0, r_temp_regid # write",
                "debug r_temp_regid",
                "# add r_stack_ptr, r_stack_ptr, 1",
                "jump @stack_return",

        
                "@ exit",
                "thread_exit",
                "thread_exit"
            ]
        },
        "k3_callstack":{
            "source":[
                "@ call_push",
                "write r_ins_ptr, r_stack_ptr, 0",
                "add r_stack_ptr, r_stack_ptr, 1",
                "write r_reg_ptr, r_stack_ptr, 0",
                "add r_stack_ptr, r_stack_ptr, 1",
                "add r_reg_ptr, r_stack_ptr, 0",
                "write r_reg_ptr, r_thread, rt_stack_ptr",
                "add r_stack_ptr, r_stack_ptr, sizeof(thread)",
                "jump @stack_return",

                "@ call_pop",
                "# TODO: opposite of call_push",
                "jump @stack_return",
            ]
        },
        "k4_library":{
            "source":[
                "@ var name",
                "push "
            ],
            "test_asm" : [
                "var row",
                "var col",
                "push_i 777",
                "push_i 888",
                "peek row",
                "push_i 999",
                "pop col",
                "push col",
                "peek row",
                "exit",
            ],
        },
        "k5_interpreter":{
            "struct":[
                "row","col","cur"
            ]
        }
        
    }
}